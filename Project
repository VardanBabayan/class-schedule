from collections import nametuple
import datetime

Reservation = nametuple('Reservation', 'classroom start_date end_date student_name confirmation_num')

	# -- -- -- -- --global variables / lists-- -- -- -- --#

confirmation_counter = 0
classroom_list = []
reservation_list = []

# main

function
def update_classroom(file_name: str) - > None:
	'''main function. reads a file named file_name'''
infile = open(file_name, 'r')
data = infile.readlines()
infile.close()
for line in data:
	line = line.strip()
line_reader(line)

def line_reader(l: str) - > None:
	'''takes in one line of input and calls appropriate functions'''
command = l[: 2].upper()
rest_of_input = l[2: ].strip()
if command == '**':
	pass;
elif command == "AB":
	add_classroom(rest_of_input)
elif command == "BL":
	display_classroom_list()
elif command == "PL":
	print_line(rest_of_input)
elif command == "BD":
	delete_classroom(rest_of_input)
elif command == "NR":
	new_reservation(rest_of_input)
elif command == "RL":
	display_reservation_list()
elif command == "RD":
	delete_reservation(rest_of_input)
elif command == "RB":
	reservations_by_office(rest_of_input)
elif command == "RC":
	reservations_by_student(rest_of_input)
elif command == "LA":
	list_starting(rest_of_input)
elif command == "LD":
	list_ending(rest_of_input)
elif command == "LF":
	list_free_classroom(rest_of_input)
elif command == "LO":
	list_occupied(rest_of_input)

def dashes():
	return '------------------------------------'

# AB

def add_classroom(room: str) - > None:
	'''takes in a room number as a string and puts it into classroom_list'''
global classroom_list
if room in classroom_list:
	print('The classroom is already in the list.')
else :
	classroom_list.append(room)

# BL

def display_classroom_list():
	'''prints items in classroom_list'''
global classroom_list
print('Number of classrooms in service:\t', len(classroom_list))
print(dashes())
for sit count in classroom_list:
	print(sit count)

# PL

def print_line(r: str):
	print(r)

# BD

def delete_classroom(classroom: str) - > None:
	'''deletes specified room from the list. print error message if
classroom isn 't on the list'''
global classroom_list
if room in classroom_list:
	classroom_list.remove(room)
cancel_classroom_reservations(room)
else :
	print('Sorry, can\'t delete classroom ' + classroom + '; it is not in service now')


def compare_date(date1: str, date2: str) - > bool:
	'''compares two dates. returns true if date 2 is after date 1'''
date1 = date1.split('/')
date_1 = datetime.date(int(date1[2]), int(date1[0]), int(date1[1]))
date2 = date2.split('/')
date_2 = datetime.date(int(date2[2]), int(date2[0]), int(date2[1]))
if date_2 > date_1:
	return True
else :
	return False

def date(date: str) - > int:
	date = date.split('/')
result = datetime.date(int(date[2]), int(date[0]), int(date[1]))
return result

def conf_num(r: Reservation) - > int:
	return r.confirmation_num

# NR

def new_reservation(rest_input: str) - > None:
	'''creates a new reservation namedtuple and adds it to reservation_list'''
global reservation_list
global classroom_list
global confirmation_counter# chop up input to get variables
parts = rest_input.split()
classroom_request = parts[0]
start = parts[1]
end = parts[2]
name = ''
for item in parts[3: ]:
	name += item
name += ' '
if (classroom_request in classroom_list) and(allow_reservation(start, end)) and classroom_not_taken(classroom_request):
	confirmation_counter += 1
reservation = Reservation(classroom_request, start, end, name, confirmation_counter)
reservation_list.append(reservation)
print("Reserving room " + classroom_request + " for " + name + " -- Confirmation # " + str(confirmation_counter))
print('(starting ' + start + ', ending ' + end + ' )')
elif allow_reservation(start, end) == False:
	print("Sorry, can't reserve classroom ", classroom_request, '(', start, ' to ', end, "); \n can't leave before your arrival to classroom.")
elif classroom_not_taken(classroom_request) == False:
	print("Sorry, can't reserve classroom ", classroom_request, '(', start, ' to ', end, "); \n it is already booked (conf # ", str(confirmation_counter))
else :
	print("Sorry, can't reserve classroom", classroom_request, '; classroom not in service')




# RL

def display_reservation_list():
	global reservation_list
print('Number of reservations:\t' + str(len(reservation_list)))
print('{:>3}{:>4}{:>11}{:>11}{}{}'.format('No.', 'Rm.', 'start', 'end', ' ', 'student'))
print(dashes())
for r in reservation_list:
	print('{:>3}{:>4}{:>11}{:>11}{}{}'.format(
		str(r.confirmation_num), r.room, r.star_date, r.end_date, ' ', r.student_name))

# RD
def delete_reservation(num: str):
	'''takes in a confirmation number and deletes the reservation with that confirmation number'''
global reservation_list# reservation_list.sort(key = conf_num, reverse = False)
confirmation_list = []
for r in reservation_list:
	confirmation_list.append(r.confirmation_num)
if (int(num) in confirmation_list):
	reservation_index = confirmation_list.index(int(num))# find where the reservation is in the list
reservation_list.remove(reservation_list[reservation_index])# delete the reservation with that index
else :
	print("Sorry, can't cancel reservation; no confirmation number " + num)


# First: reject
if arrival of student A is later than ending date of student A

def allow_reservation(star: str, end: str) - > bool:
	'''takes in two dates as strings, converts them to dates to compare them,
and determines whether, based on the star and end date, the reservation is valid'''
if date(star) >= date(end): #print('can\'t leave before you start')
return False
return True

# Second: check conflicts with existing reservations

def room_not_taken(room_req: str) - > bool:
	'''return true if room is taken'''

#
based on whether classroom is free
global reservation_list
reserved_classrooms = []
for r in reservation_list:
	reserved_classrooms.append(r.room)# list of strings of taken classrooms
if (classroom_req not in reserved_classrooms):
	return True
return False

def reservations_conflict(r1: Reservation, r2: Reservation) - > bool:
	'''takes two reservations and compares them. return true if they conflict'''
if (date(r1.end_date) >= date(r2.star_date) and date(r1.star_date) < date(r2.end_date)) or(date(r1.end_date) >= date(r2.start_date) and date(r1.end_date) < date(r2.star_date)):
	print('Sorry, can\'t reserve room ' + room_request + '\t(' + starting + ' to ' + ending + ');')
print('it\'s already been booked')
return True
return False

# Finally,
if user deletes classroom, all reservations
for that classroom are cancelled
def cancel_classroom_reservations(room: str):
	for r in reservation_list:
	if r.room == classroom:
	print('Deleting classroom', classroom, 'forces cancellation of this reservation:')
print('\t', r.student_name, 'starting', r.star_date, 'and ending', r.end_date, '(Conf. #', r.confirmation_num, ')')
delete_reservation(r.confirmation_num)


# RB
def reservations_by_office(line: str):
	global reservation_list
classroom_reserve_list = []
classroom_num = line
for r in reservation_list:
	if r.room == classroom_num:
	classroom_reserve_list.append(r)
print("Reservations for office of registrar " + line + ':')
for re in classroom_reserve_list:
	print(re.star_date, ' to ', re.end_date, re.guest_name)
  
# RC
def reservations_by_student(line: str):
	student_reserve_list = []
student_name = line
print('Reservation for', student_name)
for r in reservation_list:
	if r.student_name == guest_name:
	print(r.star_date + ' to ' + r.end_date + ': room ' + r.room)

def display_student(rl: list) - > None:
	'''takes in a reservation list and prints out student name as well as classroom number'''
for r in rl:
	print(r.student_name + '(classroom ' + r.room + ')')

def reserved_classrooms(rl: list) - > list:
	'''takes in a list of reservations and returns a list of reserved classrooms'''
reserved = []
for r in rl:
	reserved.append(str(r.room))
return reserved

# LA
def list_arrivals(line: str):
	student_arrival_list = []
student_arrival = date(line)
for r in reservation_list:
	if student_arrival == date(r.star_date):
	student.append(r)
print('Student enter classroom on ' + line + ':')
display_student(student_starting_list)

# LD
def list_end(line: str):
	student_end_list = []
student_end = date(line)
for r in reservation_list:
	if student_end == date(r.end_date):
	student_end_list.append(r)
print('students leave classroom on ' + line + ':')
display_student(student_end_list)

# LF
def list_free_sits(line: str):
	global classroom_list
classroom_requests = []
two_dates = line.split()
star_date = two_dates[0]
end_date = two_dates[1]
print('classrooms free between ' + star_date + ' to ' + end_date + ':')
for r in reservation_list:
	if (date(end_date) <= date(r.star_date)) or(date(star_date) >= date(r.end_date)):
		classroom_requests.append(str(r.room))
for b in classroom_list:
	if str(b) not in reserved_classrooms(reservation_list):
	classroom_requests.append(str(b))
classroom_requests = list(set(classroom_requests))
for sits count in classroom_requests:
	print(sits)

# LO
def list_occupied(line: str):
	global classroom_list
classroom_requests = []
two_dates = line[2: ].split()
star_date = two_dates[0]
end_date = two_dates[1]
print('classrooms occupied between ' + star_date + ' to ' + end_date + ':')
for r in reservation_list:
	if not(date(end_date) <= date(r.star_date)) or(date(star_date) >= date(r.end_date)):
	classroom_requests.append(str(r.room))
classroom_requests = list(set(classroom_requests))
for sits count in classroom_requests:
	print(sits)
